#!/usr/bin/env python
################################################
#       ~ddomu/python/NoCut.py
#       HJ Park (ddomu@umd.edu )
#       created on : 2015/02/15
#----------------------------------------------
#
#       Input  : IP address or MAC address
#       Output : IP, MAC,vlan, building- connected switch port
#
################################################
from netaddr import *
import os,re,time, datetime
import fnmatch
from ipinfo import *

mac_data_dir = '/net/mactables/data/'
dupe = '/net/arpcache/bin/DupeChecker'
filepath = '/usr/local/telecom/wp/'

#
# To check if the bld_number exist in mac_data_directory
# return True or False
def is_valid_bld(bld_number):
        bld_dir = os.path.join(mac_data_dir, bld_number)
        return os.path.exists(bld_dir)

def valid_jackID(jackID):
    return True

#
# Mac address search
# input :  bld_number and mac address
# search mac address among files in building directory
# return search result as form of [ date , found switch info]
#
#128.8.96.83      b8ca.3a75.2db8       01/05/2015-08:01     02/16/2015-13:31
def search_mac(bld_number, mac_addr,last_seen):
        if bld_number:
		bld_dir = os.path.join (mac_data_dir, bld_number)       # valiid bld_number
        else:
		bld_dir = mac_data_dir           # if building number is not given, search all building

        found_switch =[]
        last_seen = last_seen.split('-')
        last_seen = last_seen[0].split('/')
        last_seen = last_seen[2]+last_seen[0]
        try:
                if os.path.isdir(bld_dir):
                        fname_pattern = re.compile(last_seen)           #check only "YYYYMMDDhhmm" file format
                        for file in reversed(os.listdir(bld_dir)):      # !!!! Exception Handling
                                path = bld_dir+'/'+file #something like /net/mactables/data/115/201410141640
                                if ((time.time() - os.path.getctime(path)) < (30*24*60*60)) and re.match(fname_pattern,file) :  # check files created less than 90days
                                        f = open(path,'r')                                                                            # !!! Exception Handling for not accessing this file
                                        for line in f.readlines():
                                                if mac_addr in line and line not in found_switch :
                                                        found_switch.append(file)
                                                        found_switch.append(line)
                                                        #break
                                                        return found_switch
                                        f.close()
                                else:   
					pass
                        return found_switch
        except:
                return 0

def input_bld_num():
        t = 0
        while t<2:
                bld_input = raw_input('\n Building num:')
                bld_input = bld_input.replace(" ","")  #remove all space
                bld_input = bld_input.lstrip("0")

                if bld_input.lower() == 'exit' : sys.exit( " Thank you for using NoCut - HJ ")
                elif bld_input == "":
                        t = t+1
                        continue
                elif is_valid_bld(bld_input) : return bld_input
                else :
                        print " Not valid building number "
                        t = t+1
                        continue
# Any mac address input to cisco format as 0040.8c97.94df
def mac_to_string(mac_input):
        mac = EUI(mac_input)
        mac.dialect = mac_cisco
        mac_addr = str(mac)
        return mac_addr

def search_mac_table (command):
        output = os.popen(command).read()
        lines= output.split('\n')# Multi output handling
        lines = [line for line in lines if line != '']
        if len(lines) == 3 :                    # single dupe result handling
                show_sw_info(lines[2],command)
        elif len(lines) > 3 :                   # multiple dupe result handling
                select_dupe_result(lines)
        else : print "\n No connected switch info found"

def show_sw_info (line,command=0):
                e = line.split()
                ip_addr = e[0]
                mac_addr = mac_to_string(e[1])
                first_seen = e[2]
                last_seen = e[3]

                ip_addr = IPNetwork(ip_addr)
                dip = IpFounder(ip_addr)
                if command is 0 : pass
                elif '-m' in command :  dip.print_output()
                print " MAC          : ",mac_addr

                bld = bldFounder(dip.vlan_name,dip.vlan_id)
                bld_guess = bld.get_bld_number()
                if bld_guess =='0' : print " Backbone network device "
		else:
			sw_info = search_mac(bld_guess,mac_addr,last_seen)	
                        i=0
                        while i<2:
                                if sw_info:
                                        sw = sw_info[1].split('\t')
                                        print "\n------------------------------------------------"
                                        print " History      : ",sw[0],'\t', sw[2]
                                        print " Date         : ",sw_info[0]
                                        sw_connect = "~kuwillia/Python/ssh2.pl "+sw[0]+' '+mac_addr
                                        print "------------------------------------------------"
                                        print " Searching    : ", sw[0]
                                        output = os.popen(sw_connect).read()
                                        print output ,"------------------------------------------------"
										#Pinnacle Info
                                        print(pinnacle_get_jackID(sw[0],sw[2]))
                                        break
                                else:
                                        print "\n Cannot find in building ", bld_guess
                                        i = i+1
                                        bld_guess = input_bld_num()
                                        if bld_guess > 0:
                                                sw_info = search_mac(bld_guess,mac_addr,last_seen)

def select_dupe_result(lines):
                i = 0;
                print " -------------------------------- Dupe Result --------------------------------"
                print "          IP             |         MAC     |     First Seen     |    Last Seen "
                for line in lines[2:]:
                        e = line.split()
                        if len(e) is 4 :
                                i +=1
                                print " ",i, ")", e[0], '      ',  e[1] ,'    ', e[2],'    ', e[3]
                print " ------------------------------------------------------------------------------"

                while True:
                        number = raw_input ("\n Select number for detail switch info >> " )
                        if number.lower() ==  "exit" : sys.exit( " Thank you for using NoCut - HJ ")
                        elif number == "" : pass
                        try :
                                int(number)
                                if      0 < int(number) <= i :
                                        show_sw_info(lines[int(number)+1],'-m')
                                        break
                                else :
                                        print " Not a valid number"
                                        pass
                        except :
                                print " Not a valid number "
                                continue


####################    Main Function   ####################
if len(sys.argv) > 1:
	user_input = str(sys.argv[1])

	# Input mac or ip
	user_input = user_input.replace(" ","")  #remove all space

	if user_input.lower() == "exit":
			sys.exit( " Thank you for using NoCut - HJ ")
			sys.exit()

	elif valid_ipv4(user_input):
			ip_addr = user_input
			dip = IpFounder(IPNetwork(user_input))

			if dip.is_umd_ip:
					dip.print_output()
					command = dupe+' -i '+ip_addr
					search_mac_table(command)
			else : print ip_addr ,"is not valid UMD IP"
			sys.exit()

	elif valid_mac(user_input):
			mac_addr = mac_to_string(user_input)
			command = dupe+' -m '+mac_addr
			search_mac_table(command)

	elif valid_jackID(user_input):
			jackID = user_input
			# Check if the jack is active first to avoid printing unnecessary output. 
			if pinnacle_get_switchport(jackID) == " Jack ID not active":
				print(pinnacle_get_switchport(jackID))

			
			else:
				print(pinnacle_get_switchport(jackID))
				print_ips(pinnacle_get_IP(jackID))
				print(pinnacle_get_room(jackID))
				print(pinnacle_get_AU(jackID))
				print('\n')


	else:
			print  user_input, "neither IP or MAC. please try again"
			sys.exit()


else:

	os.system('clear')
	print ('#-----------------------------------------------------------------#')
	print ('#  Hi. HJ\'s NoCut! Locate a switchport using mac, IP, or Jack ID  #')
	print ('#  Input any form of MAC, IP address, or Jack ID - ddomu@umd.edu  #')
	print ('#-----------------------------------------------------------------#\n')

	while True:

		# Input mac or ip
		user_input = raw_input('\n Enter an ip address, mac address, or Jack ID to search. \n To exit the program, just type "exit" to quit:')
		user_input = user_input.replace(" ","")  #remove all space

		if user_input.lower() == "exit":
				sys.exit( " Thank you for using NoCut - HJ ")
				break
		elif user_input == "":
				continue
		elif valid_ipv4(user_input):
				ip_addr = user_input
				dip = IpFounder(IPNetwork(user_input))

				if dip.is_umd_ip:
						dip.print_output()
						command = dupe+' -i '+ip_addr
						search_mac_table(command)
				else : print '\n ', ip_addr ,"is not valid UMD IP"

		elif valid_mac(user_input):
				mac_addr = mac_to_string(user_input)
				command = dupe+' -m '+mac_addr
				search_mac_table(command)

		elif valid_jackID(user_input):
				jackID = user_input
				print(pinnacle_get_switchport(jackID))
				print_ips(pinnacle_get_IP(jackID))

		else:
				print  user_input, "neither IP or MAC. please try again"
				continue


#----------------------------------------------------------------------
#               Flow chart of nocut
#
#
#  /----------------------/
# /  IP or MAC input     /
#/----------+-----------/
#           |
#           |
#           |
#   +------------------------+
#   |         DupeCheck      |
#   |   Search mac table     |
#   +-------+----------------+
#           |
#
#-----------------------------------------------------------------------
# Input (ip address or mac address or 'exit')
#       exit -> exit script
#       1) ip ----IP info ----> search_mac_table-
#       1) mac ---------------> search_mac_table-
#                                                2-1) if unique DupeChecker result
#                                                                       3-1) show_sw_info (Dupecheck result)
#                                                                                       4-1) search_mac(bld_number, mac_addr,last_seen):
#                                                2-2) more than one result ->
#                                                                       3-2) select_dupe_result(lines):
#                                                                        select 1) 2) 3)
#                                                                                       4-1) search_mac(bld_number, mac_addr,last_seen):
#
#
#
#-----------------------------------------------------------------------

#------------------------ subprocess to call dupe ---------------#
#getDupe(ip,user_input) result
#Searching for usage since 1/1/2015.
#IP Address       MAC Address          First Seen           Last Seen
#128.8.96.83      b8ca.3a75.2db8       01/05/2015-08:01     02/16/2015-13:31

# ------- mac data
# 997-1a-sw1    246     Fa0/38  c03f.d579.7379

# -------- vlan_name no match builidng
#274    0a      ap4318-102  a i     88f0.3195.6870  ap3702i 10.96.133.207

#IP addr      :  128.8.5.4/32   MAC          :  0010.f31e.d2ec

# not able to ssh
#362    1h      apGateJ a i     e05f.b943.adc9  ap3502e 10.96.158.238

# Multiple dupe result test
# 266   0a      ups         a i 00c0.b785.628e  apc     10.96.133.15

